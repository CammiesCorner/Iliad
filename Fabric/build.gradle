plugins {
    alias fabric.plugins.loom
    alias libs.plugins.repositories
}

dependencies {
    minecraft libs.minecraft
    mappings(loom.layered {
        it.officialMojangMappings()
        it.parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.mappings.get()}@zip")
    })
    compileOnly project(":Common")

    modImplementation fabric.fabric.loader
    modImplementation fabric.fabric.api

    modImplementation libs.sparkweave.fabric
    modImplementation libs.resourcefulconfig.fabric
    modImplementation libs.common.network.fabric

    modCompileOnly fabric.modmenu
    modLocalRuntime fabric.modmenu

    modCompileOnly variantOf(libs.emi.fabric) { classifier 'api' }
    modLocalRuntime libs.emi.fabric
}

loom {
    mods {
        "${mod_id}" {
            sourceSet("main")
            project(":Common").sourceSets.main
        }
    }

    accessWidenerPath.set(file("src/main/resources/${mod_id}.accesswidener"))

    mixin {
        useLegacyMixinAp.set(false)
    }

    runs {
        configureEach {
            it.property('sparkweave.debug', 'true')
            ideConfigGenerated(true)

            if (rootProject.hasProperty('mc_java_agent_path')) {
                vmArg("-javaagent:${rootProject.mc_java_agent_path}")
            }
        }

        client {
            client()
            setConfigName("Fabric Client")
            runDir("run")

            if (rootProject.hasProperty('mc_uuid')) {
                programArgs("--uuid", rootProject.mc_uuid)
            }

            if (rootProject.hasProperty('mc_username')) {
                programArgs("--username", rootProject.mc_username)
            }
        }

        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run/server")
        }
    }
}

fabricApi {
    configureDataGeneration()
}

tasks.named("compileJava", JavaCompile) {
    source(project(":Common").sourceSets.main.allJava)
}

tasks.named("javadoc", Javadoc) {
    source(project(":Common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}
